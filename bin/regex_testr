#!/usr/bin/env ruby

require 'gtk2'

def update_tests
  options = 0
  options |= @chk_ext.active? ? Regexp::EXTENDED : 0
  #options |= @chk_line.active? ? Regexp::MULTILINE : 0
  options |= @chk_case.active? ? Regexp::IGNORECASE : 0
  @buf_tests.text.each_line.with_index do |test, idx|
    begin
      rex = Regexp.new(@e_regexp.text, options)
      if matches = test.match(rex)
        matches.to_a.each.with_index do |match, midx|
          m_start = @buf_tests.get_iter_at_line_offset(idx, matches.begin(midx))
          m_end = @buf_tests.get_iter_at_line_offset(idx, matches.end(midx))
          @buf_tests.apply_tag((midx+1).to_s, m_start, m_end)
        end
      else
        raise
      end
    rescue
      m_start = @buf_tests.get_iter_at_line(idx)
      m_end = @buf_tests.get_iter_at_line_offset(idx, test.length-1)
      @buf_tests.remove_all_tags(m_start, m_end)
    end
  end
end

window = Gtk::Window.new

box_main = Gtk::VBox.new(false, 0)
window.add(box_main)

box_toggles = Gtk::HBox.new(false, 0)

@chk_case = Gtk::CheckButton.new('Case Sensitive')
@chk_case.signal_connect('toggled') {
  update_tests
}
box_toggles.pack_start(@chk_case, false, true, 2)

@chk_ext = Gtk::CheckButton.new('Extended')
@chk_ext.signal_connect('toggled') {
  update_tests
}
box_toggles.pack_start(@chk_ext, false, true, 2)

box_main.pack_start(box_toggles, false, true, 2)

#lbl_regexp = Gtk::Label.new('Regular Expression:')
#lbl_regexp.set_alignment(0, 0)
#box_main.pack_start(lbl_regexp, false, true, 2)

@e_regexp = Gtk::Entry.new
@e_regexp.signal_connect('changed') {
  update_tests
}
@e_regexp.signal_connect('changed') {
  update_tests
}
box_main.pack_start(@e_regexp, false, true, 2)

tv_tests = Gtk::TextView.new
tv_tests.editable =  true
tv_tests.cursor_visible =  true
tv_tests.pixels_above_lines = 2
tv_tests.pixels_below_lines = 2
tv_tests.pixels_inside_wrap = 2
tv_tests.left_margin = 10
tv_tests.right_margin = 10
@buf_tests = tv_tests.buffer
@buf_tests.text = "This is some text!\nChange me!\nPlease!"
@buf_tests.signal_connect('modified-changed') {
  update_tests
}
@buf_tests.create_tag('0',{'foreground' => '#aaaaaa'})
@buf_tests.create_tag('1',{'foreground' => '#ff0000'})
@buf_tests.create_tag('2',{'foreground' => '#00ff00'})
@buf_tests.create_tag('3',{'foreground' => '#0000ff'})
@buf_tests.create_tag('4',{'foreground' => '#00ffff'})
@buf_tests.create_tag('5',{'foreground' => '#ffff00'})
@buf_tests.create_tag('6',{'foreground' => '#ff00ff'})
@buf_tests.create_tag('7',{'foreground' => '#0f0f0f'})
box_main.pack_start(tv_tests, true, true, 2)

btn_quit = Gtk::Button.new('Quit')
btn_quit.signal_connect('clicked') {
  Gtk.main_quit
}
box_main.pack_start(btn_quit, false, true, 2)

window.title = 'Regexr'
window.border_width = 10
window.signal_connect('delete_event') { Gtk.main_quit }
window.set_size_request(250, 250)
window.resizable = true
window.show_all

Gtk.main
#  vim: set ts=2 sw=2 tw=80 ft=ruby fdm=syntax et fen :
